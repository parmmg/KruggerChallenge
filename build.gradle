plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'jacoco'
	id 'info.solidsoft.pitest' version '1.9.0'
	id 'org.sonarqube' version '3.4.0.2513'
}

group = 'com.krugger'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.auth0:java-jwt:4.0.0'
	implementation 'commons-io:commons-io:2.11.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.liquibase:liquibase-core'
	implementation 'io.springfox:springfox-swagger-ui:2.10.5'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation group: 'org.pitest', name: 'pitest-junit5-plugin', version: '0.12'
}

test {
	useJUnitPlatform()
	testLogging {
		events 'passed', 'skipped', 'failed'
		exceptionFormat = 'full'
	}
	exclude '**/com/krugger/challenge/KruggerChallengeApplicationTest'
}

sonarqube {
	properties {
		property 'sonar.coverage.exclusions', '**/com/krugger/challenge/presentation/presenter/**, **/com/krugger/challenge/presentation/controller/**, **/com/krugger/challenge/KruggerChallengeApplication*, **/com/krugger/challenge/repository/**'
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			excludes = ['KruggerChallengeApplication*']
			limit {
				minimum = 0.05
			}
			excludes = [
					'com.krugger.challenge.KruggerChallengeApplication',
					'com.krugger.challenge.enumerator.**',
					'com.krugger.challenge.presentation.presenter.**',
					'com.krugger.challenge.presentation.controller.**',
					'com.krugger.challenge.entity.**',
					'com.krugger.challenge.repository.**'
			]
		}
	}
}

jacocoTestReport {
	reports {
		html.destination file('build/jacocoHtml')
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/com/krugger/challenge/KruggerChallengeApplication*',
					'**/com/krugger/challenge/presentation/presenter*',
					'**/com/krugger/challenge/presentation/controller*',
					'**/com/alquimiasoft/mispedidos/listener**',
					'**/com/krugger/challenge/repository/**'
			])
		})
	}
}


pitest {
	threads = 2
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
	targetClasses = ['com.krugger.challenge.*']
	excludedClasses = ['com.krugger.challenge.KruggerChallengeApplication',
					   'com.krugger.challenge.enumerator.**',
					   'com.krugger.challenge.presentation.presenter.**',
					   'com.krugger.challenge.presentation.controller.**',
					   'com.krugger.challenge.entity.**',
					   'com.krugger.challenge.repository.**']
	excludedTestClasses = ['*IntegrationTest']
}
